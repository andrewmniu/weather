{"version":3,"sources":["components/CurrentWeather.js","components/HourlyWeather.js","components/HourlyWeatherList.js","components/DailyWeather.js","components/DailyWeatherList.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentWeather","weather","className","d","Date","setUTCSeconds","dt","toLocaleTimeString","hour","minute","timeZoneName","formatDate","Math","round","temp","feels_like","width","height","src","icon","alt","description","HourlyWeather","toLocaleString","month","day","HourlyWeatherList","ListGroup","variant","map","idx","Item","DailyWeather","max","min","weekday","DailyWeatherList","Dashboard","location","searchText","hideAlert","onChange","onSubmit","useState","interval","setInterval","onClick","e","target","id","Alert","hidden","type","value","placeholder","current","Card","Header","Nav","defaultActiveKey","Link","href","Body","hourly","daily","API_KEY","process","App","setWeather","setSearchText","setLocation","setHideAlert","useEffect","getWeather","getCoordinates","latitude","longitude","url","URL","searchParams","append","fetch","then","resp","json","obj","cod","coord","lat","lon","a","coords","long","style","textAlign","preventDefault","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90b314a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CurrentWeather = ({ weather }) => {\r\n  const formatDate = () => {\r\n    let d = new Date(0)\r\n    d.setUTCSeconds(weather.dt)\r\n    const options = {hour: 'numeric', minute: '2-digit', timeZoneName: 'short' };\r\n    return d.toLocaleTimeString('en-US', options)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container current-weather\">\r\n      <div className=\"row align-items-center justify-content-evenly\">\r\n        <h2>Current Weather</h2>\r\n        <div className=\"col\">\r\n          <p>As of {formatDate()}</p>\r\n          <p className=\"current-temperature\">{Math.round(weather.temp)}&deg;F</p>\r\n          <p>Feels like: {Math.round(weather.feels_like)}&deg;F</p>\r\n      </div>\r\n        <div className=\"col\">\r\n          <img\r\n            width=\"100\"\r\n            height=\"100\"\r\n            src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`}\r\n            alt=\"Weather icon\"\r\n            />\r\n          <p className=\"description\">{weather.weather[0].description}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react'\r\n\r\nconst HourlyWeather = ({weather}) => {\r\n  const formatDate = () => {\r\n    let d = new Date(0)\r\n    d.setUTCSeconds(weather.dt)\r\n    const options = { month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit' };\r\n    return d.toLocaleString('en-US', options)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container hourly-weather\">\r\n      <div className=\"row align-items-center justify-content-evenly\">\r\n        <div className=\"col interval-description\">\r\n          <img\r\n            width=\"75\"\r\n            height=\"75\"\r\n            src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`}\r\n            alt=\"Weather icon\"\r\n            />\r\n          {weather.weather[0].description}\r\n        </div>\r\n        <div className=\"col\">\r\n          <p className=\"hourly-temperature\">{Math.round(weather.temp)}&deg;F</p>\r\n        </div>\r\n        <div className=\"col date\">\r\n          {formatDate(weather.dt)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HourlyWeather\r\n","import React from 'react'\r\nimport HourlyWeather from \"./HourlyWeather.js\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nconst HourlyWeatherList = ({weather}) => {\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {weather.map((hour, idx) => {\r\n          return <ListGroup.Item key={idx}><HourlyWeather weather={hour}/></ListGroup.Item>\r\n        })}\r\n      </ListGroup>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HourlyWeatherList\r\n","import React from 'react'\r\n\r\nconst DailyWeather = ({weather}) => {\r\n  const formatDate = () => {\r\n    let d = new Date(0)\r\n    d.setUTCSeconds(weather.dt)\r\n    const options = { weekday: 'short', month: 'short', day: 'numeric' };\r\n    return d.toLocaleString('en-US', options)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container hourly-weather\">\r\n      <div className=\"row align-items-center justify-content-evenly\">\r\n        <div className=\"col interval-description\">\r\n          <img\r\n            width=\"75\"\r\n            height=\"75\"\r\n            src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`}\r\n            alt=\"Weather icon\"\r\n            />\r\n          {weather.weather[0].description}\r\n        </div>\r\n        <div className=\"col\">\r\n          <p className=\"daily-temperature\">{Math.round(weather.temp.max)}&deg;F</p>\r\n          <span className=\"low\">/{Math.round(weather.temp.min)}&deg;F</span>\r\n        </div>\r\n        <div className=\"col date\">\r\n          {formatDate(weather.dt)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DailyWeather\r\n","import React from 'react'\r\nimport DailyWeather from \"./DailyWeather.js\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nconst DailyWeatherList = ({weather}) => {\r\n  return (\r\n    <div>\r\n      <ListGroup variant=\"flush\">\r\n        {weather.map((day, idx) => {\r\n          return <ListGroup.Item key={idx}><DailyWeather weather={day}/></ListGroup.Item>\r\n        })}\r\n      </ListGroup>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DailyWeatherList;\r\n","import { React, useState } from \"react\";\r\nimport CurrentWeather from \"./CurrentWeather.js\";\r\nimport HourlyWeatherList from \"./HourlyWeatherList.js\";\r\nimport DailyWeatherList from \"./DailyWeatherList.js\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nconst Dashboard = ({\r\n  weather,\r\n  location,\r\n  searchText,\r\n  hideAlert,\r\n  onChange,\r\n  onSubmit,\r\n}) => {\r\n  const [interval, setInterval] = useState(\"hourly\");\r\n\r\n  const onClick = (e) => {\r\n    setInterval(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Weather Forecast for {location}</h1>\r\n      <Alert variant=\"danger\" hidden={hideAlert}>\r\n        Please type in a valid city/zipcode\r\n      </Alert>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={searchText}\r\n          placeholder=\"City name or zip\"\r\n          className=\"location-search\"\r\n          onChange={onChange}\r\n        />\r\n      </form>\r\n      <CurrentWeather weather={weather.current} />\r\n      <h2 id=\"forecast\">{interval} Forecast</h2>\r\n      <Card>\r\n        <Card.Header>\r\n          <Nav variant=\"tabs\" defaultActiveKey=\"#hourly\">\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#hourly\" id=\"hourly\" onClick={onClick}>\r\n                Hourly\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#daily\" id=\"daily\" onClick={onClick}>\r\n                Daily\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {interval === \"hourly\" ? (\r\n            <HourlyWeatherList weather={weather.hourly} />\r\n          ) : (\r\n            <DailyWeatherList weather={weather.daily} />\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Dashboard from \"./components/Dashboard.js\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction App() {\n  const [weather, setWeather] = useState(null);\n  const [searchText, setSearchText] = useState(\"\");\n  const [location, setLocation] = useState(\"Charlottesville\");\n  const [hideAlert, setHideAlert] = useState(true);\n\n  useEffect(() => {\n    getWeather(location);\n  }, []);\n\n  const getCoordinates = (location) => {\n    let latitude, longitude;\n    const url = new URL(\"https://api.openweathermap.org/data/2.5/weather\");\n    url.searchParams.append(\"appid\", API_KEY);\n    url.searchParams.append(\"q\", location);\n    return fetch(url)\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((obj) => {\n        if (obj.cod === 200) {\n          latitude = obj.coord.lat;\n          longitude = obj.coord.lon;\n          return [latitude, longitude];\n        }\n        else{\n          return [null,null]\n        }\n      });\n  };\n\n  const getWeather = async (location) => {\n    let lat, long;\n    await getCoordinates(location).then((coords) => {\n      lat = coords[0];\n      long = coords[1];\n    });\n\n    if (lat === null && long === null) {\n      return \"error\";\n    }\n\n    const url = new URL(\"https://api.openweathermap.org/data/2.5/onecall\");\n    url.searchParams.append(\"appid\", API_KEY);\n    url.searchParams.append(\"lat\", lat);\n    url.searchParams.append(\"lon\", long);\n    url.searchParams.append(\"units\", \"imperial\");\n    url.searchParams.append(\"exclude\", \"minutely,alerts\");\n\n    fetch(url)\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((obj) => {\n        setWeather(obj);\n      });\n      return \"success\";\n  };\n\n  const onChange = (e) => {\n    setSearchText(e.target.value);\n  };\n\n  const onLocationSearch = (e) => {\n    e.preventDefault();\n    getWeather(searchText).then(result => {\n      if (result === \"success\"){\n        setLocation(searchText);\n        setHideAlert(true);\n      }\n      else{\n        setHideAlert(false);\n      }\n    })\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {weather !== null && (\n        <Dashboard\n          weather={weather}\n          location={location}\n          searchText={searchText}\n          hideAlert={hideAlert}\n          onChange={onChange}\n          onSubmit={onLocationSearch}\n        ></Dashboard>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}